import jwt from 'jsonwebtoken';

// üîê Cl√© secr√®te pour v√©rifier le token (√† s√©curiser dans .env)
const JWT_SECRET = process.env.JWT_SECRET || 'vraiment-tres-secret';

// ‚úÖ Middleware pour v√©rifier le token JWT
export const verifyToken = (req, res, next) => {
  // On r√©cup√®re le header Authorization
  const authHeader = req.headers.authorization;

  // Si le header est manquant ou mal form√© ‚Üí refus
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ message: 'Acc√®s refus√© : token manquant' });
  }

  // On r√©cup√®re le token (apr√®s le mot 'Bearer ')
  const token = authHeader.split(' ')[1];

  try {
    // V√©rifie et d√©code le token
    const decoded = jwt.verify(token, JWT_SECRET);

    // On stocke les infos utilisateur dans la requ√™te pour les prochaines √©tapes
    req.user = decoded;

    // On continue vers la route demand√©e
    next();
  } catch (error) {
    console.error('Erreur token :', error);
    return res.status(403).json({ message: 'Token invalide ou expir√©' });
  }
};
