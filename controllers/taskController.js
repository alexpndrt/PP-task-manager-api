// controllers/taskController.js

// ===============================
// üìù Simuler une base de donn√©es
// ===============================
let tasks = [
  { id: 1, title: 'Apprendre Node.js', done: false },
  { id: 2, title: 'Cr√©er une API REST', done: true },
];

// ========================================
// üìã Lire TOUTES les t√¢ches (GET /tasks)
// ========================================
export const getAllTasks = (req, res) => {
  res.json(tasks); // On renvoie simplement le tableau entier
};

// ==================================================
// üîç Lire UNE t√¢che par ID (GET /tasks/:id)
// ==================================================
export const getTaskById = (req, res) => {
  // On r√©cup√®re l'id dans l'URL et on le convertit en nombre
  const taskId = parseInt(req.params.id);

  // On cherche la t√¢che dont l'id correspond
  const task = tasks.find(function (t) {
    return t.id === taskId;
  });

  // Si la t√¢che n'existe pas ‚Üí erreur 404
  if (!task) {
    return res.status(404).json({ message: 'T√¢che non trouv√©e' });
  }

  // Sinon, on retourne la t√¢che trouv√©e
  res.json(task);
};

// ================================================
// ‚ûï Cr√©er une nouvelle t√¢che (POST /tasks)
// ================================================
export const createTask = (req, res) => {
  // On r√©cup√®re les donn√©es envoy√©es par l'utilisateur
  const { title, done } = req.body;

  // S√©curit√© : v√©rifier que le titre est pr√©sent
  if (!title) {
    return res.status(400).json({ message: 'Le titre est obligatoire' });
  }

  // On cr√©e un nouvel objet t√¢che
  const newTask = {
    id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1, // Id auto-incr√©ment√©
    title: title,
    done: done ?? false // Si "done" n'est pas envoy√© ‚Üí false par d√©faut
  };

  // On ajoute la nouvelle t√¢che dans le tableau
  tasks.push(newTask);

  // On r√©pond avec la t√¢che cr√©√©e
  res.status(201).json(newTask);
};


// ======================================================
// ‚úèÔ∏è Modifier une t√¢che existante (PUT /tasks/:id)
// ======================================================
export const updateTask = (req, res) => {
  const taskId = parseInt(req.params.id);

  // On cherche l'index de la t√¢che
  const taskIndex = tasks.findIndex(function (t) {
    return t.id === taskId;
  });

  // Si pas trouv√©e ‚Üí erreur
  if (taskIndex === -1) {
    return res.status(404).json({ message: 'T√¢che non trouv√©e' });
  }

  // R√©cup√©rer les nouvelles donn√©es
  const { title, done } = req.body;

  // Modifier la t√¢che en gardant les anciennes valeurs si non pr√©cis√©es
  tasks[taskIndex] = {
    ...tasks[taskIndex],
    title: title ?? tasks[taskIndex].title,
    done: done ?? tasks[taskIndex].done
  };

  res.json(tasks[taskIndex]);
};

// =======================================================
// üóë Supprimer une t√¢che (DELETE /tasks/:id)
// =======================================================
export const deleteTask = (req, res) => {
  const taskId = parseInt(req.params.id);

  // Trouver l'index
  const taskIndex = tasks.findIndex(function (t) {
    return t.id === taskId;
  });

  // Si pas trouv√©e
  if (taskIndex === -1) {
    return res.status(404).json({ message: 'T√¢che non trouv√©e' });
  }

  // Supprimer la t√¢che avec splice
  const deletedTask = tasks.splice(taskIndex, 1);

  res.json({ message: 'T√¢che supprim√©e', deletedTask });
};